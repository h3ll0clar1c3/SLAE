IA-32 Architecture:

https://i.imgur.com/Mr9pvq9.jpg

gdb /bin/bash
GNU gdb (Ubuntu/Linaro 7.4-2012.04-0ubuntu2.1) 7.4-2012.04
Copyright (C) 2012 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "i686-linux-gnu".
For bug reporting instructions, please see:
<http://bugs.launchpad.net/gdb-linaro/>...
Reading symbols from /bin/bash...(no debugging symbols found)...done.
(gdb) break main
Breakpoint 1 at 0x805eba6
(gdb) run 
Starting program: /bin/bash 

Breakpoint 1, 0x0805eba6 in main ()
(gdb) info registers
eax            0x1	1
ecx            0xbffff774	-1073744012
edx            0xbffff704	-1073744124
ebx            0xb7fa1ff4	-1208344588
esp            0xbffff6cc	0xbffff6cc
ebp            0xbffff6d8	0xbffff6d8
esi            0x0	0
edi            0x0	0
eip            0x805eba6	0x805eba6 <main+6>
eflags         0x246	[ PF ZF IF ]
cs             0x73	115
ss             0x7b	123
ds             0x7b	123
es             0x7b	123
fs             0x0	0
gs             0x33	51
(gdb) display /x $eax
1: /x $eax = 0x1
(gdb) display /x $ax
2: /x $ax = 0x1
(gdb) display /x $ecx
3: /x $ecx = 0xbffff774
(gdb) display /x $cx
4: /x $cx = 0xf774
(gdb) display /x $ch
5: /x $ch = 0xf7
(gdb) display /x $cl
6: /x $cl = 0x74
(gdb) info all-registers 
eax            0x1	1
ecx            0xbffff774	-1073744012
edx            0xbffff704	-1073744124
ebx            0xb7fa1ff4	-1208344588
esp            0xbffff6cc	0xbffff6cc
ebp            0xbffff6d8	0xbffff6d8
esi            0x0	0
edi            0x0	0
eip            0x805eba6	0x805eba6 <main+6>
eflags         0x246	[ PF ZF IF ]
cs             0x73	115
ss             0x7b	123
ds             0x7b	123
es             0x7b	123
fs             0x0	0
gs             0x33	51
st0            0	(raw 0x00000000000000000000)
st1            0	(raw 0x00000000000000000000)
st2            0	(raw 0x00000000000000000000)
st3            0	(raw 0x00000000000000000000)
st4            0	(raw 0x00000000000000000000)
st5            0	(raw 0x00000000000000000000)
st6            0	(raw 0x00000000000000000000)
st7            0	(raw 0x00000000000000000000)
fctrl          0x37f	895
fstat          0x0	0
ftag           0xffff	65535
fiseg          0x0	0
fioff          0x0	0
foseg          0x0	0
fooff          0x0	0
fop            0x0	0
mxcsr          0x1f80	[ IM DM ZM OM UM PM ]
ymm0           {v8_float = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_double = {0x0, 0x0, 0x0, 0x0}, 
  v32_int8 = {0x0 <repeats 32 times>}, v16_int16 = {0x0 <repeats 16 times>}, v8_int32 = {0x0, 0x0, 0x0, 
    0x0, 0x0, 0x0, 0x0, 0x0}, v4_int64 = {0x0, 0x0, 0x0, 0x0}, v2_int128 = {
    0x00000000000000000000000000000000, 0x00000000000000000000000000000000}}
ymm1           {v8_float = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_double = {0x0, 0x0, 0x0, 0x0}, 
  v32_int8 = {0x0 <repeats 32 times>}, v16_int16 = {0x0 <repeats 16 times>}, v8_int32 = {0x0, 0x0, 0x0, 
    0x0, 0x0, 0x0, 0x0, 0x0}, v4_int64 = {0x0, 0x0, 0x0, 0x0}, v2_int128 = {
    0x00000000000000000000000000000000, 0x00000000000000000000000000000000}}
ymm2           {v8_float = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_double = {0x0, 0x0, 0x0, 0x0}, 
  v32_int8 = {0x0 <repeats 32 times>}, v16_int16 = {0x0 <repeats 16 times>}, v8_int32 = {0x0, 0x0, 0x0, 
    0x0, 0x0, 0x0, 0x0, 0x0}, v4_int64 = {0x0, 0x0, 0x0, 0x0}, v2_int128 = {
    0x00000000000000000000000000000000, 0x00000000000000000000000000000000}}
ymm3           {v8_float = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_double = {0x0, 0x0, 0x0, 0x0}, 
  v32_int8 = {0x0 <repeats 32 times>}, v16_int16 = {0x0 <repeats 16 times>}, v8_int32 = {0x0, 0x0, 0x0, 
    0x0, 0x0, 0x0, 0x0, 0x0}, v4_int64 = {0x0, 0x0, 0x0, 0x0}, v2_int128 = {
    0x00000000000000000000000000000000, 0x00000000000000000000000000000000}}
ymm4           {v8_float = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_double = {0x0, 0x0, 0x0, 0x0}, 
  v32_int8 = {0x0 <repeats 32 times>}, v16_int16 = {0x0 <repeats 16 times>}, v8_int32 = {0x0, 0x0, 0x0, 
    0x0, 0x0, 0x0, 0x0, 0x0}, v4_int64 = {0x0, 0x0, 0x0, 0x0}, v2_int128 = {
    0x00000000000000000000000000000000, 0x00000000000000000000000000000000}}
ymm5           {v8_float = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_double = {0x0, 0x0, 0x0, 0x0}, 
  v32_int8 = {0x0 <repeats 32 times>}, v16_int16 = {0x0 <repeats 16 times>}, v8_int32 = {0x0, 0x0, 0x0, 
    0x0, 0x0, 0x0, 0x0, 0x0}, v4_int64 = {0x0, 0x0, 0x0, 0x0}, v2_int128 = {
---Type <return> to continue, or q <return> to quit---
    0x00000000000000000000000000000000, 0x00000000000000000000000000000000}}
ymm6           {v8_float = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_double = {0x0, 0x0, 0x0, 0x0}, 
  v32_int8 = {0x0 <repeats 32 times>}, v16_int16 = {0x0 <repeats 16 times>}, v8_int32 = {0x0, 0x0, 0x0, 
    0x0, 0x0, 0x0, 0x0, 0x0}, v4_int64 = {0x0, 0x0, 0x0, 0x0}, v2_int128 = {
    0x00000000000000000000000000000000, 0x00000000000000000000000000000000}}
ymm7           {v8_float = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_double = {0x0, 0x0, 0x0, 0x0}, 
  v32_int8 = {0x0 <repeats 32 times>}, v16_int16 = {0x0 <repeats 16 times>}, v8_int32 = {0x0, 0x0, 0x0, 
    0x0, 0x0, 0x0, 0x0, 0x0}, v4_int64 = {0x0, 0x0, 0x0, 0x0}, v2_int128 = {
    0x00000000000000000000000000000000, 0x00000000000000000000000000000000}}
mm0            {uint64 = 0x0, v2_int32 = {0x0, 0x0}, v4_int16 = {0x0, 0x0, 0x0, 0x0}, v8_int8 = {0x0, 
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}}
mm1            {uint64 = 0x0, v2_int32 = {0x0, 0x0}, v4_int16 = {0x0, 0x0, 0x0, 0x0}, v8_int8 = {0x0, 
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}}
mm2            {uint64 = 0x0, v2_int32 = {0x0, 0x0}, v4_int16 = {0x0, 0x0, 0x0, 0x0}, v8_int8 = {0x0, 
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}}
mm3            {uint64 = 0x0, v2_int32 = {0x0, 0x0}, v4_int16 = {0x0, 0x0, 0x0, 0x0}, v8_int8 = {0x0, 
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}}
mm4            {uint64 = 0x0, v2_int32 = {0x0, 0x0}, v4_int16 = {0x0, 0x0, 0x0, 0x0}, v8_int8 = {0x0, 
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}}
mm5            {uint64 = 0x0, v2_int32 = {0x0, 0x0}, v4_int16 = {0x0, 0x0, 0x0, 0x0}, v8_int8 = {0x0, 
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}}
mm6            {uint64 = 0x0, v2_int32 = {0x0, 0x0}, v4_int16 = {0x0, 0x0, 0x0, 0x0}, v8_int8 = {0x0, 
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}}
mm7            {uint64 = 0x0, v2_int32 = {0x0, 0x0}, v4_int16 = {0x0, 0x0, 0x0, 0x0}, v8_int8 = {0x0, 
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}}
(gdb) set disassembly-flavor intel
(gdb) disassemble main
Dump of assembler code for function main:
   0x0805eba0 <+0>:	push   ebp
   0x0805eba1 <+1>:	mov    ebp,esp
   0x0805eba3 <+3>:	push   edi
   0x0805eba4 <+4>:	push   esi
   0x0805eba5 <+5>:	push   ebx
=> 0x0805eba6 <+6>:	and    esp,0xfffffff0

CPU Modes and Memory Management:

cat /proc/pid/maps
pmap -d pid
gdb /bin/bash
GNU gdb (Ubuntu/Linaro 7.4-2012.04-0ubuntu2.1) 7.4-2012.04
Copyright (C) 2012 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "i686-linux-gnu".
For bug reporting instructions, please see:
<http://bugs.launchpad.net/gdb-linaro/>...
Reading symbols from /bin/bash...(no debugging symbols found)...done.
(gdb) info proc mappings
No current process: you must name one.
(gdb) break main
Breakpoint 1 at 0x805eba6
(gdb) run
Starting program: /bin/bash 

Breakpoint 1, 0x0805eba6 in main ()
(gdb) info proc mappings
process 6099
Mapped address spaces:

	Start Addr   End Addr       Size     Offset objfile
	 0x8048000  0x8124000    0xdc000        0x0 /bin/bash
	 0x8124000  0x8125000     0x1000    0xdb000 /bin/bash
	 0x8125000  0x812a000     0x5000    0xdc000 /bin/bash
	 0x812a000  0x812f000     0x5000        0x0 [heap]
	0xb7dfa000 0xb7dfb000     0x1000        0x0 
	0xb7dfb000 0xb7f9f000   0x1a4000        0x0 /lib/i386-linux-gnu/libc-2.15.so
	0xb7f9f000 0xb7fa0000     0x1000   0x1a4000 /lib/i386-linux-gnu/libc-2.15.so
	0xb7fa0000 0xb7fa2000     0x2000   0x1a4000 /lib/i386-linux-gnu/libc-2.15.so
	0xb7fa2000 0xb7fa3000     0x1000   0x1a6000 /lib/i386-linux-gnu/libc-2.15.so
	0xb7fa3000 0xb7fa7000     0x4000        0x0 
	0xb7fa7000 0xb7faa000     0x3000        0x0 /lib/i386-linux-gnu/libdl-2.15.so
	0xb7faa000 0xb7fab000     0x1000     0x2000 /lib/i386-linux-gnu/libdl-2.15.so
	0xb7fab000 0xb7fac000     0x1000     0x3000 /lib/i386-linux-gnu/libdl-2.15.so
	0xb7fac000 0xb7fc8000    0x1c000        0x0 /lib/i386-linux-gnu/libtinfo.so.5.9
	0xb7fc8000 0xb7fca000     0x2000    0x1b000 /lib/i386-linux-gnu/libtinfo.so.5.9
	0xb7fca000 0xb7fcb000     0x1000    0x1d000 /lib/i386-linux-gnu/libtinfo.so.5.9
	0xb7fdb000 0xb7fdd000     0x2000        0x0 
	0xb7fdd000 0xb7fde000     0x1000        0x0 [vdso]
	0xb7fde000 0xb7ffe000    0x20000        0x0 /lib/i386-linux-gnu/ld-2.15.so
	0xb7ffe000 0xb7fff000     0x1000    0x1f000 /lib/i386-linux-gnu/ld-2.15.so
	0xb7fff000 0xb8000000     0x1000    0x20000 /lib/i386-linux-gnu/ld-2.15.so
	0xbffdf000 0xc0000000    0x21000        0x0 [stack]

Hello World:

vim HelloWorld.asm

; HelloWorld.asm 
; Author: Vivek Ramachandran



global _start

section .text

_start:

        ; print hello world on the screen

        mov eax, 0x4
        mov ebx, 0x1
        mov ecx, message
        mov edx, mlen
        int 0x80


        ; exit the program gracefully

        mov eax, 0x1
        mov ebx, 0x5
        int 0x80



section .data

        message: db "Hello World!"
        mlen    equ  $-message

nasm -f elf32 -o HelloWorld.o HelloWorld.asm (Assemble)
ld -o HelloWorld HelloWorld.o (Link)
echo $? (Display return value)
5

HelloWorld GDB:

gdb ./HelloWorld 
GNU gdb (Ubuntu/Linaro 7.4-2012.04-0ubuntu2.1) 7.4-2012.04
Copyright (C) 2012 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "i686-linux-gnu".
For bug reporting instructions, please see:
<http://bugs.launchpad.net/gdb-linaro/>...
Reading symbols from /SLAE x86/HelloWorld/HelloWorld...(no debugging symbols found)...done.
(gdb) break _start
Breakpoint 1 at 0x8048080
(gdb) run 
Starting program: /SLAE x86/HelloWorld/HelloWorld 

Breakpoint 1, 0x08048080 in _start ()
(gdb) set disassembly-flavor intel
(gdb) disassemble 
Dump of assembler code for function _start:
=> 0x08048080 <+0>:	mov    eax,0x4
   0x08048085 <+5>:	mov    ebx,0x1
   0x0804808a <+10>:	mov    ecx,0x80490a4
   0x0804808f <+15>:	mov    edx,0xc
   0x08048094 <+20>:	int    0x80
   0x08048096 <+22>:	mov    eax,0x1
   0x0804809b <+27>:	mov    ebx,0x5
   0x080480a0 <+32>:	int    0x80
End of assembler dump.
(gdb) info registers
eax            0x0	0
ecx            0x0	0
edx            0x0	0
ebx            0x0	0
esp            0xbffff700	0xbffff700
ebp            0x0	0x0
esi            0x0	0
edi            0x0	0
eip            0x8048080	0x8048080 <_start>
eflags         0x202	[ IF ]
cs             0x73	115
ss             0x7b	123
ds             0x7b	123
es             0x7b	123
fs             0x0	0
gs             0x0	0
(gdb) stepi
0x08048085 in _start ()
(gdb) disassemble 
Dump of assembler code for function _start:
   0x08048080 <+0>:	mov    eax,0x4
=> 0x08048085 <+5>:	mov    ebx,0x1
   0x0804808a <+10>:	mov    ecx,0x80490a4
   0x0804808f <+15>:	mov    edx,0xc
   0x08048094 <+20>:	int    0x80
   0x08048096 <+22>:	mov    eax,0x1
   0x0804809b <+27>:	mov    ebx,0x5
   0x080480a0 <+32>:	int    0x80
End of assembler dump.
(gdb) info registers
eax            0x4	4
ecx            0x0	0
edx            0x0	0
ebx            0x0	0
esp            0xbffff700	0xbffff700
ebp            0x0	0x0
esi            0x0	0
edi            0x0	0
eip            0x8048085	0x8048085 <_start+5>
eflags         0x202	[ IF ]
cs             0x73	115
ss             0x7b	123
ds             0x7b	123
es             0x7b	123
fs             0x0	0
gs             0x0	0
(gdb) stepi
0x0804808a in _start ()
(gdb) info registers
eax            0x4	4
ecx            0x0	0
edx            0x0	0
ebx            0x1	1
esp            0xbffff700	0xbffff700
ebp            0x0	0x0
esi            0x0	0
edi            0x0	0
eip            0x804808a	0x804808a <_start+10>
eflags         0x202	[ IF ]
cs             0x73	115
ss             0x7b	123
ds             0x7b	123
es             0x7b	123
fs             0x0	0
gs             0x0	0
(gdb) disassemble 
Dump of assembler code for function _start:
   0x08048080 <+0>:	mov    eax,0x4
   0x08048085 <+5>:	mov    ebx,0x1
=> 0x0804808a <+10>:	mov    ecx,0x80490a4
   0x0804808f <+15>:	mov    edx,0xc
   0x08048094 <+20>:	int    0x80
   0x08048096 <+22>:	mov    eax,0x1
   0x0804809b <+27>:	mov    ebx,0x5
   0x080480a0 <+32>:	int    0x80
End of assembler dump.
(gdb) x/s 0x80490a4
0x80490a4 <message>:	 "Hello World!"
(gdb) stepi
0x0804808f in _start ()
(gdb) info registers
eax            0x4	4
ecx            0x80490a4	134516900
edx            0x0	0
ebx            0x1	1
esp            0xbffff700	0xbffff700
ebp            0x0	0x0
esi            0x0	0
edi            0x0	0
eip            0x804808f	0x804808f <_start+15>
eflags         0x202	[ IF ]
cs             0x73	115
ss             0x7b	123
ds             0x7b	123
es             0x7b	123
fs             0x0	0
gs             0x0	0
(gdb) stepi
0x08048094 in _start ()
(gdb) info registers
eax            0x4	4
ecx            0x80490a4	134516900
edx            0xc	12
ebx            0x1	1
esp            0xbffff700	0xbffff700
ebp            0x0	0x0
esi            0x0	0
edi            0x0	0
eip            0x8048094	0x8048094 <_start+20>
eflags         0x202	[ IF ]
cs             0x73	115
ss             0x7b	123
ds             0x7b	123
es             0x7b	123
fs             0x0	0
gs             0x0	0
(gdb) disassemble 
Dump of assembler code for function _start:
   0x08048080 <+0>:	mov    eax,0x4
   0x08048085 <+5>:	mov    ebx,0x1
   0x0804808a <+10>:	mov    ecx,0x80490a4
   0x0804808f <+15>:	mov    edx,0xc
=> 0x08048094 <+20>:	int    0x80
   0x08048096 <+22>:	mov    eax,0x1
   0x0804809b <+27>:	mov    ebx,0x5
   0x080480a0 <+32>:	int    0x80
End of assembler dump.
(gdb) stepi
Hello World!0x08048096 in _start ()
(gdb) disassemble 
Dump of assembler code for function _start:
   0x08048080 <+0>:	mov    eax,0x4
   0x08048085 <+5>:	mov    ebx,0x1
   0x0804808a <+10>:	mov    ecx,0x80490a4
   0x0804808f <+15>:	mov    edx,0xc
   0x08048094 <+20>:	int    0x80
=> 0x08048096 <+22>:	mov    eax,0x1
   0x0804809b <+27>:	mov    ebx,0x5
   0x080480a0 <+32>:	int    0x80
End of assembler dump.
(gdb) info registers
eax            0xc	12
ecx            0x80490a4	134516900
edx            0xc	12
ebx            0x1	1
esp            0xbffff700	0xbffff700
ebp            0x0	0x0
esi            0x0	0
edi            0x0	0
eip            0x8048096	0x8048096 <_start+22>
eflags         0x202	[ IF ]
cs             0x73	115
ss             0x7b	123
ds             0x7b	123
es             0x7b	123
fs             0x0	0
gs             0x0	0
(gdb) stepi
0x0804809b in _start ()
(gdb) info registers
eax            0x1	1
ecx            0x80490a4	134516900
edx            0xc	12
ebx            0x1	1
esp            0xbffff700	0xbffff700
ebp            0x0	0x0
esi            0x0	0
edi            0x0	0
eip            0x804809b	0x804809b <_start+27>
eflags         0x202	[ IF ]
cs             0x73	115
ss             0x7b	123
ds             0x7b	123
es             0x7b	123
fs             0x0	0
gs             0x0	0
(gdb) disassemble 
Dump of assembler code for function _start:
   0x08048080 <+0>:	mov    eax,0x4
   0x08048085 <+5>:	mov    ebx,0x1
   0x0804808a <+10>:	mov    ecx,0x80490a4
   0x0804808f <+15>:	mov    edx,0xc
   0x08048094 <+20>:	int    0x80
   0x08048096 <+22>:	mov    eax,0x1
=> 0x0804809b <+27>:	mov    ebx,0x5
   0x080480a0 <+32>:	int    0x80
End of assembler dump.
(gdb) stepi
0x080480a0 in _start ()
(gdb) info registers
eax            0x1	1
ecx            0x80490a4	134516900
edx            0xc	12
ebx            0x5	5
esp            0xbffff700	0xbffff700
ebp            0x0	0x0
esi            0x0	0
edi            0x0	0
eip            0x80480a0	0x80480a0 <_start+32>
eflags         0x202	[ IF ]
cs             0x73	115
ss             0x7b	123
ds             0x7b	123
es             0x7b	123
fs             0x0	0
gs             0x0	0
(gdb) disassemble 
Dump of assembler code for function _start:
   0x08048080 <+0>:	mov    eax,0x4
   0x08048085 <+5>:	mov    ebx,0x1
   0x0804808a <+10>:	mov    ecx,0x80490a4
   0x0804808f <+15>:	mov    edx,0xc
   0x08048094 <+20>:	int    0x80
   0x08048096 <+22>:	mov    eax,0x1
   0x0804809b <+27>:	mov    ebx,0x5
=> 0x080480a0 <+32>:	int    0x80
End of assembler dump.
(gdb) stepi
[Inferior 1 (process 8672) exited with code 05]

Data Types:

